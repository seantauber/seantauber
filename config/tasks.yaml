# Task Definitions for GitHub GenAI List

# 1a. Fetch Starred Repositories
fetch_starred:
  description: |
    Fetch the complete list of repositories starred by the user from GitHub API.
    Handle authentication and pagination properly to ensure all starred repos
    are retrieved. Get full repository details for each starred item.
    Store results directly in database using DatabaseManager.
  expected_output: A FetchSummary object containing processing stats for starred repos (success, message, processed_count, batch stats, etc.)
  agent: github_api_agent

# 1b. Search Trending Repositories
search_trending:
  description: |
    Search GitHub for trending GenAI repositories that meet these criteria:
    - Updated within the last month
    - Minimum 100 stars
    - Active issues and PRs
    - Keywords: "generative ai", "llm", "ai agents", "machine learning"
    Focus on repositories with significant recent engagement.
    Store results directly in database using DatabaseManager.
  expected_output: A FetchSummary object containing processing stats for trending repos (success, message, processed_count, batch stats, etc.)
  agent: github_api_agent

# 1c. Combine Repository Lists
combine_repos:
  description: |
    Retrieve repositories from database and combine the starred and trending lists:
    1. Remove any duplicates (prefer starred version if duplicate)
    2. Ensure consistent data structure
    3. Add source flags ("starred", "trending", or "both")
    4. Sort by relevance (starred items first, then by stars)
    5. Store combined results back to database
  expected_output: A ProcessingSummary object containing stats about the combination process
  agent: github_api_agent
  context: 
    - fetch_starred
    - search_trending

# 2. Analyze and Filter
analyze_repos:
  description: |
    Process repositories in sequential batches using these specific steps:

    1. For each batch:
       a. Use get_unprocessed_repos_tool to fetch exactly 10 unprocessed repositories
       b. For each repository in the batch:
          - Evaluate code quality and documentation
          - Check community engagement (stars, issues, PRs)
          - Assess relevance to GenAI/AI/ML
          - Determine appropriate category and subcategory
          - Calculate a quality score (0.0 to 1.0)
       c. Create analysis data for each repo with this structure:
          {
            'raw_repo_id': <id from raw repo>,
            'quality_score': <float between 0.0 and 1.0>,
            'category': <main category>,
            'subcategory': <subcategory if applicable>,
            'include': <boolean based on quality>,
            'justification': <reason for inclusion/exclusion>
          }
       d. Use store_analyzed_repos_tool to save the batch analysis results
       e. Continue with next batch until no unprocessed repos remain

    2. Quality Criteria:
       - Documentation quality and completeness
       - Code quality and organization
       - Community engagement level
       - Maintenance activity
       - Relevance to AI/ML/GenAI

    3. Main Categories:
       - Generative AI
       - Artificial Intelligence
       - MLOps & AI Infrastructure
       - Machine Learning Tools
       - Development Tools
       - Other AI-Related

    4. Processing Rules:
       - Process exactly 10 repos per batch
       - Must include raw_repo_id in analysis data
       - Must store results before processing next batch
       - Quality score must be between 0.0 and 1.0
       - Include must be boolean (true/false)
       - Categories must be consistent across batches

  expected_output: An AnalysisSummary object containing analysis stats, category distribution, and quality metrics
  agent: analyzer
  context: 
    - combine_repos

# 3. Parse Current README
parse_readme:
  description: |
    Parse the content of the current README.md file.
    Identify static sections that should be preserved:
    - "How This Landing Page Works"
    - "How to Implement This Landing Page"
    - "Contributing"
    - "License"
    Extract current structure and formatting.
    <current_readme_content>
    {current_readme_content}
    </current_readme_content>
  expected_output: A JSON object containing README structure with static sections and formatting rules
  agent: content_processor

# 4. Generate Content
generate_content:
  description: |
    Generate new README content by:
    1. Retrieving analyzed repositories from database using DatabaseManager.get_analyzed_repos()
    2. Using the README structure from parse_readme
    3. Preserving all static sections exactly as they are
    4. Updating the table of contents based on new categories
    5. Updating the "Last edited" date
    
    Database retrieval notes:
    - Use DatabaseManager.get_analyzed_repos() to fetch repository data
    - Data includes source ('starred' or 'trending') and analysis_data
    - Repository data is already analyzed and categorized
    
    Ensure all formatting is consistent with the original.
  expected_output: Complete README.md content as a string, properly formatted in Markdown
  agent: content_generator
  context: 
    - analyze_repos
    - parse_readme

# 5. Validate and Write
update_readme:
  description: |
    1. Validate the generated README content:
        - Check all static sections are preserved
        - Verify formatting consistency
        - Ensure all links are properly formatted
    2. Write to README.md
  expected_output: Success message or validation error details
  agent: content_processor
  context: 
    - generate_content
  output_file: new_README.md
