# Task Definitions for GitHub GenAI List

# 1a. Fetch Starred Repositories
fetch_starred:
  description: |
    Fetch the complete list of repositories starred by the user from GitHub API.
    Handle authentication and pagination properly to ensure all starred repos
    are retrieved. Get full repository details for each starred item.
  expected_output: A JSON object containing an array of starred repositories with full repository details
  agent: github_api_agent

# 1b. Search Trending Repositories
search_trending:
  description: |
    Search GitHub for trending GenAI repositories that meet these criteria:
    - Updated within the last month
    - Minimum 100 stars
    - Active issues and PRs
    - Keywords: "generative ai", "llm", "ai agents", "machine learning"
    Focus on repositories with significant recent engagement.
  expected_output: A JSON object containing an array of trending repositories with engagement metrics
  agent: github_api_agent

# 1c. Combine Repository Lists
combine_repos:
  description: |
    Combine the starred and trending repository lists:
    1. Remove any duplicates (prefer starred version if duplicate)
    2. Ensure consistent data structure
    3. Add source flags ("starred", "trending", or "both")
    4. Sort by relevance (starred items first, then by stars)
  expected_output: A JSON object containing an array of combined unique repositories with source flags
  agent: github_api_agent
  context: 
    - fetch_starred
    - search_trending

# 2. Analyze and Filter
analyze_repos:
  description: |
    Analyze the combined repository list for quality and relevance.
    Evaluate each repository based on:
    - Code quality and documentation
    - Community engagement and maintenance
    - Relevance to GenAI/AI/ML
    - Appropriate categorization
    Filter out repositories that don't meet quality standards.
    Prioritize starred repositories in the analysis.
  expected_output: A JSON object containing an array of analyzed repositories with quality scores and categorization
  agent: analyzer
  context: 
    - combine_repos

# 3. Parse Current README
parse_readme:
  description: |
    Parse the content of the current README.md file.
    Identify static sections that should be preserved:
    - "How This Landing Page Works"
    - "How to Implement This Landing Page"
    - "Contributing"
    - "License"
    Extract current structure and formatting.
    <current_readme_content>
    {current_readme_content}
    </current_readme_content>
  expected_output: A JSON object containing README structure with static sections and formatting rules
  agent: content_processor

# 4. Generate Content
generate_content:
  description: |
    Generate new README content using:
    1. The analyzed repository list from analyze_repos
    2. The README structure from parse_readme
    3. Preserve all static sections exactly as they are
    4. Update the table of contents based on new categories
    5. Update the "Last edited" date
    Ensure all formatting is consistent with the original.
  expected_output: Complete README.md content as a string, properly formatted in Markdown
  agent: content_generator
  context: 
    - analyze_repos
    - parse_readme

# 5. Validate and Write
update_readme:
  description: |
    1. Validate the generated README content:
        - Check all static sections are preserved
        - Verify formatting consistency
        - Ensure all links are properly formatted
    2. Write to README.md
  expected_output: Success message or validation error details
  agent: content_processor
  context: 
    - generate_content
  output_file: new_README.md
